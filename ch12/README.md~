#LR5
##Chapter 12 - Testing
####Test Mode

Rails applications can be run in 3 modes, or "environments": **Development**, **Test**, and **Production**. To switch from the default mode, _development_, to _test_ mode, issue the following command at the terminal command prompt:

		rails server -e test

####Setting Up a Test Database with Fixtures

**Fixtures** allow developers to define stable data for use in the test database. Fixtures are written in YAML and the Rails scaffolding generator provides us with the basic files in the _test/fixtures_ directory. 

Open _test/fixtures/students.yml_ in the text editor and change the existing generic fixtures to read as follows:

        magnum:
          given_name: Thomas
          middle_name: Sullivan
          family_name: Magnum
          date_of_birth: 1945-01-29
          grade_point_average: 2.92
          start_date: 1988-09-12

        rick:
          given_name: Orville
          middle_name: Wilbur
          family_name: Richard
          date_of_birth: 1943-07-23
          grade_point_average: 3.94
          start_date: 1988-09-12

        tc:
          given_name: Theodore
          middle_name:
          family_name: Calvin
          date_of_birth: 1939-12-18
          grade_point_average: 3.76
          start_date: 1988-09-12

These values, although obviously made-up, more closely represent those expected from our application. Likewise, update the _test/fixtures/awards.yml_ file with the following fixture data:

        pi:
          name: Private Investigator
          year: 1988
          student: magnum

        pilot:
          name: Helicopter Pilot - Island Hoppers
          year: 1990
          student: tc

        owner:
          name: King Kamehameha Club
          year: 1989
          student: rick

Finally, edit the contents of _test/fixtures/courses.yml_ like so:

        surveillance:
          name: Escape and Evasion
          students: magnum, rick

        security:
          name: "Personal and private property security"
          students: magnum, rick

        aviation:
          name: "Aviation Safety"
          students: tc

####Model Testing

Firstly, note the constraints defined in  in *students06/app/models/award.rb*:

        class Award < ActiveRecord::Base
          # every award is linked to a student, through student_id
          belongs_to :student

          validates_presence_of :name, :year

          # particular award can only be given once in every year
          validates_uniqueness_of :name, :scope => :year,
            :message => "already been given for that year"

          # we started the award scheme in 1980
          validates_inclusion_of :year, :in => (1980 .. Date.today.year)
        end

The model test files generated by Rails scaffolding are not particularly useful. Open *students06/test/models/award_test.rb* and add some code to ensure the `year` constraint behaves as expected:

        require 'test_helper'

        class AwardTest < ActiveSupport::TestCase
          def test_validity_of_year

            # test for rejection of missing year
            award = Award.new({:name => "Test award"})
            assert !award.valid?

            # test under lower boundary
            award.year = 1979
            assert !award.valid?

            # lower boundary
            award.year = 1980
            assert award.valid?

            # top boundary
            award.year = Date.today.year
            assert award.valid?

            # top boundary case, award isn't valid for next year
            award.year = Date.today.year + 1
            assert !award.valid?
          end
        end

Now open *students06/test/models/course_test.rb* and app some basic functionality to get a sense of how model tests are put together:

        require 'test_helper'

            class CourseTest < ActiveSupport::TestCase
            def test_validity
              course = Course.new
              assert !course.valid?
              course.name = "New course"
              assert course.valid?
          end
        end

In *students06/test/models/student_test.rb*, let us examine some more complicated test procedures. Here we begin by specifying the **fixtures** that need to be loaded for these tests. This will allow us to reference the "sort of" real data in *students06/test/fixtures/students.yml* and *students06/test/fixtures/courses.yml*.

        require 'test_helper'

        class StudentTest < ActiveSupport::TestCase

          fixtures :students, :courses

          def test_validity
            jonathan = Student.new({:given_name => "Jonathan",
                :family_name => "Higgins"})
            assert !jonathan.valid?, "Should require date of birth, start date"
            jonathan.date_of_birth = "1989-02-03"
            jonathan.start_date = Date.today
            assert jonathan.valid?, "Failed even with all required info"
          end


          def test_name
            jonathan = Student.new({:given_name => "Jonathan",
                :family_name => "Higgins"})
            assert_equal jonathan.name, "Jonathan Higgins", "name method screwed up"
          end

          def test_enrolled_in
            tc = students(:tc)
            assert tc.enrolled_in?(courses(:aviation)), "TC not enrolled in surveillance?"
            assert !tc.enrolled_in?(courses(:security)), "TC should stay out of security"
          end

          def test_unenrolled_courses
            magnum = students(:magnum)
            rick = students(:rick)
            assert_equal [courses(:aviation)], magnum.unenrolled_courses
            assert_equal [courses(:aviation)], rick.unenrolled_courses
            jonathan = Student.new({:given_name => "Jonathan", :family_name => "Higgins"})
            assert_equal Course.all, jonathan.unenrolled_courses
          end
        end

To run model tests, enter `rake test:models` at the command prompt. (For unit testing we would use `rake test:units`.)

